generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id      Int    @id @default(autoincrement())
  email   String @unique
  name    String
  password String
  phone    String @unique
  profile Profile[]
  bill    Bill[]
  comments      Comment[]
  roleId  Int    // Foreign key to Role
  role    Role   @relation(fields: [roleId], references: [id])
}

model Role {
  id          Int          @id @default(autoincrement())
  name        String       @unique  // Role name, e.g. "Admin", "Doctor"
  users       User[]       // Quan hệ 1-nhiều với User
  permissions RolePermission[]  // Quan hệ nhiều-nhiều với Permission qua bảng RolePermission
}

model Permission {
  id          Int          @id @default(autoincrement())
  name        String       @unique  // Permission name, e.g. "READ_PATIENT_DATA", "WRITE_REPORT"
  roles       RolePermission[]  // Quan hệ nhiều-nhiều với Role qua bảng RolePermission
}

model RolePermission {
  roleId      Int
  permissionId Int
  role        Role       @relation(fields: [roleId], references: [id])
  permission  Permission @relation(fields: [permissionId], references: [id])

  @@id([roleId, permissionId])  // Composite primary key
}

model Profile {
  id                      Int   @id @default(autoincrement())
  name                    String
  email                   String
  phone                   String
  privacyConsent          String
  gender                  Gender   @default(MALE)
  birthDate               DateTime?
  address                 String?
  occupation              String?
  emergencyContactName    String
  emergencyContactNumber  String
  insuranceProvider       String
  insurancePolicyNumber   String
  allergies               String
  currentMedication       String
  pastMedicalHistory      String
  identificationType      String
  identificationNumber    String
  identificationDocumentId String
  primaryPhysician        String
  identificationDocumentUrl String
  treatmentConsent        String
  disclosureConsent       String
  userId                  Int @unique
  user                    User @relation(fields: [userId], references: [id])
  appointments            Appointment[]
}

model Faculty {
  id   Int  @id @default(autoincrement())
  name String
  doctors Doctor[]
}

model Doctor {
  id            Int   @id @default(autoincrement())
  name          String
  academicTitle String
  faculty       Faculty @relation(fields: [facultyId], references: [id])
  facultyId     Int
  appointments  Appointment[]
  comments      Comment[]
  schedules Schedule[] 
}

model Comment {
  id        Int       @id @default(autoincrement())
  content   String
  rating    Int       // Giá trị rating (1-5 chẳng hạn)
  createdAt       DateTime  @default(now())
  doctorId  Int
  doctor    Doctor     @relation(fields: [doctorId], references: [id])
  userId    Int
  user      User       @relation(fields: [userId], references: [id])
}

model Appointment {
  id                 Int    @id @default(autoincrement())
  date               DateTime
  timeSlots          String
  reason             String
  status             AppointmentStatus @default(PENDING)
  cancellationReason String?
  note               String?
  profile            Profile   @relation(fields: [profileId], references: [id])
  profileId          Int
  doctor             Doctor    @relation(fields: [doctorId], references: [id])
  doctorId           Int
  payments           Bill?
}

model Bill {
  id              Int   @id @default(autoincrement())
  createdAt       DateTime  @default(now())
  amount          Int
  paymentMethod   String
  note            String
  status          BillStatus @default(PENDING)
  user            User @relation(fields: [userId], references: [id])
  appointment     Appointment @relation(fields: [appointmentId], references: [id])
  userId       	  Int
  appointmentId   Int @unique
}
model Schedule {
  id          Int         @id @default(autoincrement())
  doctorId    Int
  date        DateTime     
  isAvailable Boolean      
  timeSlots   SheduleTimeSlot[]   

  doctor      Doctor       @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  @@unique([doctorId, date]) 
}
model TimeSlot {
  id          Int        @id @default(autoincrement())
  timeSlots   String     
  isAvailable Boolean    
  schedule   SheduleTimeSlot[]   
}
model SheduleTimeSlot{
  scheduleId Int 
  timeSlotsId Int
  schedule    Schedule   @relation(fields: [scheduleId], references: [id], onDelete: Cascade)
  timeSlots   TimeSlot   @relation(fields: [timeSlotsId], references: [id], onDelete: Cascade)
  @@id([scheduleId, timeSlotsId])
}
enum BillStatus {
  COMPLETED
  FAILED
  PENDING
  REFUNDED
  CANCELLED
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum AppointmentStatus {
  SCHEDULED
  PENDING
  CANCELLED
}
