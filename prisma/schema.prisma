generator client {
  provider = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id      String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email   String @unique
  name    String
  password String
  phone    String @unique
  roleName UserRole @default(USER)
  profile Profile[] 
  bill    Bill[]
  comments      Comment[]
}

model Profile {
  id                      String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                    String
  email                   String
  phone                   String
  gender                  Gender   @default(MALE)
  allergies              String?
  birthDate               DateTime?
  pastMedicalHistory      String
  identificationType      String
  identificationNumber    String
  identificationDocumentUrl String
  userId                  String   @db.Uuid
  user                    User @relation(fields: [userId], references: [id])
  appointments            Appointment[]
}

model Faculty {
  id   String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name String
  description String
  doctors Doctor[]
}
model Service{
  id String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name String 
  price Float
  description String
  appointment Appointment[]
}
model Doctor {
  id            String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String
  academicTitle String
  faculty       Faculty @relation(fields: [facultyId], references: [id])
  facultyId     String @db.Uuid
  comments      Comment[]
  doctorSchedule DoctorSchedule[]

}

model Comment {
  id        String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  content   String
  rating    Int       // Giá trị rating (1-5 chẳng hạn)
  createdAt DateTime  @default(now())
  doctorId  String     @db.Uuid
  doctor    Doctor     @relation(fields: [doctorId], references: [id])
  userId    String     @db.Uuid
  user      User       @relation(fields: [userId], references: [id])
}

model Appointment {
  id                 String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  date               DateTime
  timeSlots          String
  reason             String
  status             AppointmentStatus @default(SCHEDULED)
  cancellationReason String?
  note               String?
  profile            Profile   @relation(fields: [profileId], references: [id])
  profileId          String    @db.Uuid
  serviceId          String    @db.Uuid
  Service            Service  @relation(fields: [serviceId],references:[id])
  payments           Bill?
  doctorScheduleId   String @unique @db.Uuid
  doctorSchedule     DoctorSchedule @relation(fields: [doctorScheduleId],references:[id])
}

model Bill {
  id              String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @default(now())
  amount          Float
  paymentMethod   String
  note            String
  status          BillStatus @default(PENDING)
  user            User @relation(fields: [userId], references: [id])
  appointment     Appointment @relation(fields: [appointmentId], references: [id])
  userId       	  String     @db.Uuid
  appointmentId   String @unique @db.Uuid
}
model Schedule {
  id          String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  date        DateTime
  timeSlot    String     
  isAvailable Boolean      
  doctorSchedule DoctorSchedule[]  
}

model DoctorSchedule{
  id String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  doctorId String  @db.Uuid
  doctor Doctor  @relation(fields: [doctorId], references: [id])
  scheduleId String @db.Uuid
  schedule Schedule @relation(fields: [scheduleId], references: [id])
  appointment Appointment?
  @@unique([doctorId, scheduleId])
}

enum BillStatus {
  COMPLETED
  FAILED
  PENDING
  REFUNDED
  CANCELLED
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum AppointmentStatus {
  SCHEDULED
  PENDING
  CANCELLED
}

enum UserRole{
  USER 
  ADMIN
}